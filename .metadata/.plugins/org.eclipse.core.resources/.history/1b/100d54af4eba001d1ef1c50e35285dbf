package com.something.api;

import static dev.samstevens.totp.util.Utils.getDataUriForImage;
import static org.springframework.http.HttpHeaders.AUTHORIZATION;
import static org.springframework.http.HttpStatus.FORBIDDEN;

import java.io.IOException;
import java.net.URI;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.util.MimeTypeUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.zxing.WriterException;
import com.something.domain.Activation;
import com.something.domain.Affiliate;
import com.something.domain.Appraisal;
import com.something.domain.CashWallet;
import com.something.domain.CommissionWallet;
import com.something.domain.Comparison;
import com.something.domain.Email;
import com.something.domain.HistoryWallet;
import com.something.domain.Investment;
import com.something.domain.Pack;
import com.something.domain.Recovery;
import com.something.domain.Role;
import com.something.domain.TestData;
import com.something.domain.User;
import com.something.dto.UserDTO;
import com.something.service.ActivationService;
import com.something.service.AffiliateService;
import com.something.service.AppraisalService;
import com.something.service.AuthenticatorService;
import com.something.service.CashWalletService;
import com.something.service.CommissionWalletService;
import com.something.service.ComparisonService;
import com.something.service.HistoryWalletService;
import com.something.service.InvestmentService;
import com.something.service.MaillerService;
import com.something.service.PackService;
import com.something.service.RecoveryService;
import com.something.service.UserService;
import com.something.totp.TotpAutoConfiguration;

import dev.samstevens.totp.code.CodeGenerator;
import dev.samstevens.totp.code.DefaultCodeGenerator;
import dev.samstevens.totp.code.DefaultCodeVerifier;
import dev.samstevens.totp.exceptions.CodeGenerationException;
import dev.samstevens.totp.exceptions.QrGenerationException;
import dev.samstevens.totp.qr.QrData;
import dev.samstevens.totp.qr.QrDataFactory;
import dev.samstevens.totp.qr.QrGenerator;
import dev.samstevens.totp.secret.SecretGenerator;
import dev.samstevens.totp.time.SystemTimeProvider;
import dev.samstevens.totp.time.TimeProvider;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class UserResource {
	@Autowired
	AppraisalService appService;
	
	@Autowired
	ComparisonService comService;
	
	@Autowired
	RecoveryService recoService;

	@Autowired
	ActivationService actiService;

	@Autowired
	PackService packService;

	@Autowired
	CommissionWalletService cmwService;

	@Autowired
	UserService userService;

	@Autowired
	MaillerService mailerServie;

	@Autowired
	AffiliateService affService;

	@Autowired
	CashWalletService cwService;

	@Autowired
	HistoryWalletService hwService;

	@Autowired
	InvestmentService investService;

	@Autowired
	AuthenticatorService authService;

	@Autowired
	TotpAutoConfiguration verifyCode;

	@Autowired
	private SecretGenerator secretGenerator;

	@Autowired
	private QrDataFactory qrDataFactory;

	@Autowired
	private QrGenerator qrGenerator;

	@GetMapping("/authentication/showQR/{username}")
	public List<String> generate2FA(@PathVariable("username") String username)
			throws QrGenerationException, WriterException, IOException, CodeGenerationException {
		User user = userService.getUser(username);
		QrData data = qrDataFactory.newBuilder().label(user.getUsername()).secret(user.getSecret())
				.issuer("Something Application").period(30).build();

		String qrCodeImage = getDataUriForImage(qrGenerator.generate(data), qrGenerator.getImageMimeType());
		List<String> info2FA = new ArrayList<>();
		String isEnabled = "";
		if (user.isMfaEnabled()) {
			isEnabled = "true";
		} else {
			isEnabled = "false";
		}
		info2FA.add(isEnabled);
		info2FA.add(user.getSecret());
		info2FA.add(qrCodeImage);

		return info2FA;
	}

	@PostMapping("/authentication/enabled")
	public String enabled(@RequestParam("username") String username, @RequestParam("code") String code) {
		User user = userService.getUser(username);
		TimeProvider timeProvider = new SystemTimeProvider();
		CodeGenerator codeGenerator = new DefaultCodeGenerator();
		DefaultCodeVerifier verify = new DefaultCodeVerifier(codeGenerator, timeProvider);
		verify.setAllowedTimePeriodDiscrepancy(0);

		if (verify.isValidCode(user.getSecret(), code)) {
			userService.enabledAuthen(user);
			return "Enabled Success";
		} else {
			return "Enabled Failed";
		}
	}

	@PostMapping("/user/changePassword")
	public String changePassword(@RequestParam("username") String username,
			@RequestParam("currentPassword") String currentPassword, @RequestParam("newPassword") String newPassword,
			@RequestParam("confirmNewPassword") String confirmNewPassword, @RequestParam("authen") String authen) {
		User user = userService.getUser(username);
		TimeProvider timeProvider = new SystemTimeProvider();
		CodeGenerator codeGenerator = new DefaultCodeGenerator();
		DefaultCodeVerifier verify = new DefaultCodeVerifier(codeGenerator, timeProvider);
		verify.setAllowedTimePeriodDiscrepancy(0);

		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

		if (encoder.matches(currentPassword, user.getPassword())) {
			if (user.isMfaEnabled()) {
				if (verify.isValidCode(user.getSecret(), authen)) {
					user.setPassword(encoder.encode(newPassword));
					userService.changePassword(user);
					return "Change password success";
				} else {
					return "2FA code is incorrect";
				}
			} else {
				user.setPassword(encoder.encode(newPassword));
				userService.changePassword(user);
				return "Change password success";
			}
		} else {
			return "Old password is incorrect";
		}
	}

	@PostMapping("/authentication/disabled")
	public String disabled(@RequestParam("username") String username, @RequestParam("code") String code) {
		User user = userService.getUser(username);
		TimeProvider timeProvider = new SystemTimeProvider();
		CodeGenerator codeGenerator = new DefaultCodeGenerator();
		DefaultCodeVerifier verify = new DefaultCodeVerifier(codeGenerator, timeProvider);
		verify.setAllowedTimePeriodDiscrepancy(0);

		if (verify.isValidCode(user.getSecret(), code)) {
			userService.disabledAuthen(user);
			// x√≥a secret 2fa
			String secret = secretGenerator.generate();

			user.setSecret(secret);
			userService.updateSecrect(user);
			return "Disabled Success";
		} else {
			return "Disabled Failed";
		}

	}

	@PostMapping("/excelToData")
	public ResponseEntity<Comparison> convertExcelTo(@RequestParam("file") MultipartFile reapExcelDataFile)
			throws IOException {
		List<TestData> listData = new ArrayList<>();
		XSSFWorkbook workbook = new XSSFWorkbook(reapExcelDataFile.getInputStream());
		XSSFSheet worksheet = workbook.getSheetAt(0);

		for (int i = 1; i < worksheet.getPhysicalNumberOfRows(); i++) {
			TestData tempData = new TestData();

			XSSFRow row = worksheet.getRow(i);

			int k = worksheet.getRow(i).getLastCellNum();

			Cell cell = worksheet.getRow(i).getCell(0);
			if (cell.getCellType() == CellType.NUMERIC) {
				tempData.setContent1(String.valueOf(row.getCell(0).getNumericCellValue()));
			} else if (cell.getCellType() == CellType.FORMULA) {
				tempData.setContent1(row.getCell(0).getRawValue());
			} else if (cell.getCellType() == CellType.STRING) {
				tempData.setContent1(row.getCell(0).getStringCellValue());
			}

			Cell cel2 = worksheet.getRow(i).getCell(1);
			if (cel2.getCellType() == CellType.NUMERIC) {
				tempData.setContent2(String.valueOf(row.getCell(1).getNumericCellValue()));
			} else if (cel2.getCellType() == CellType.FORMULA) {
				tempData.setContent2(row.getCell(1).getRawValue());
			} else if (cel2.getCellType() == CellType.STRING) {
				tempData.setContent2(row.getCell(1).getStringCellValue());
			}

			Cell cel3 = worksheet.getRow(i).getCell(2);
			if (cel3.getCellType() == CellType.NUMERIC) {
				tempData.setContent3(String.valueOf(row.getCell(2).getNumericCellValue()));
			} else if (cel3.getCellType() == CellType.FORMULA) {
				tempData.setContent3(row.getCell(2).getRawValue());
			} else if (cel3.getCellType() == CellType.STRING) {
				tempData.setContent3(row.getCell(2).getStringCellValue());
			}

			if (worksheet.getRow(i).getLastCellNum() == 4) {
				Cell cel4 = worksheet.getRow(i).getCell(3);
				if (cel4.getCellType() == CellType.NUMERIC) {
					tempData.setContent4(String.valueOf(row.getCell(3).getNumericCellValue()));
				} else if (cel4.getCellType() == CellType.FORMULA) {
					tempData.setContent4(row.getCell(3).getRawValue());
				} else if (cel4.getCellType() == CellType.STRING) {
					tempData.setContent4(row.getCell(3).getStringCellValue());
				}
			}
			
			else if (worksheet.getRow(i).getLastCellNum() == 5) {
				Cell cel4 = worksheet.getRow(i).getCell(3);
				if (cel4.getCellType() == CellType.NUMERIC) {
					tempData.setContent4(String.valueOf(row.getCell(3).getNumericCellValue()));
				} else if (cel4.getCellType() == CellType.FORMULA) {
					tempData.setContent4(row.getCell(3).getRawValue());
				} else if (cel4.getCellType() == CellType.STRING) {
					tempData.setContent4(row.getCell(3).getStringCellValue());
				}
				
				Cell cel5 = worksheet.getRow(i).getCell(4);
				if (cel5.getCellType() == CellType.NUMERIC) {
					tempData.setContent5(String.valueOf(row.getCell(4).getNumericCellValue()));
				} else if (cel5.getCellType() == CellType.FORMULA) {
					tempData.setContent5(row.getCell(4).getRawValue());
				} else if (cel5.getCellType() == CellType.STRING) {
					tempData.setContent5(row.getCell(4).getStringCellValue());
				}
			}
			
			listData.add(tempData);

		}

		System.out.println(listData.get(22).getContent5());
		Appraisal app = new Appraisal();
		app.setAddress(listData.get(0).getContent2());
		app.setCreateDate(listData.get(2).getContent2());
		app.setLegal(listData.get(3).getContent2());
		app.setType(listData.get(4).getContent2());
		app.setAcreage(Double.parseDouble(listData.get(5).getContent2() == null ? "0" : listData.get(5).getContent2()));
		app.setNtsacr(Double.parseDouble(listData.get(6).getContent2() == null ? "0" : listData.get(6).getContent2()));
		app.setClnacr(Double.parseDouble(listData.get(7).getContent2() == null ? "0" : listData.get(7).getContent2()));
		app.setVplgacr(Double.parseDouble(listData.get(8).getContent2() == null ? "0" : listData.get(8).getContent2()));
		app.setWidth(Double.parseDouble(listData.get(9).getContent2() == null ? "0" : listData.get(9).getContent2()));
		app.setHeight(
				Double.parseDouble(listData.get(10).getContent2() == null ? "0" : listData.get(10).getContent2()));
		app.setShape(listData.get(11).getContent2());
		app.setPosition(listData.get(12).getContent2());
		app.setTraffic(listData.get(13).getContent2());
		app.setOther(listData.get(14).getContent2());
		app.setCtxd(listData.get(15).getContent2());
		app.setPriceSale(
				Double.parseDouble(listData.get(16).getContent2() == null ? "0" : listData.get(16).getContent2()));
		app.setPriceDeal(
				Double.parseDouble(listData.get(17).getContent2() == null ? "0" : listData.get(17).getContent2()));
		app.setPricePurpose(
				Double.parseDouble(listData.get(18).getContent2() == null ? "0" : listData.get(18).getContent2()));
		app.setPriceBoundary(
				Double.parseDouble(listData.get(19).getContent2() == null ? "0" : listData.get(19).getContent2()));
		app.setPriceLand(
				Double.parseDouble(listData.get(20).getContent2() == null ? "0" : listData.get(20).getContent2()));
		app.setUnitPrice(
				Double.parseDouble(listData.get(21).getContent2() == null ? "0" : listData.get(21).getContent2()));
		
		appService.save(app);

		Comparison compare = new Comparison();

		compare.setAddress(listData.get(0).getContent3());
		compare.setRefference(listData.get(1).getContent3());
		compare.setCreateDate(listData.get(2).getContent3());
		compare.setLegal(listData.get(3).getContent3());
		compare.setType(listData.get(4).getContent3());
		compare.setAcreage(
				Double.parseDouble(listData.get(5).getContent3() == null ? "0" : listData.get(5).getContent3()));
		compare.setNtsacr(
				Double.parseDouble(listData.get(6).getContent3() == null ? "0" : listData.get(6).getContent3()));
		compare.setClnacr(
				Double.parseDouble(listData.get(7).getContent3() == null ? "0" : listData.get(7).getContent3()));
		compare.setVplgacr(
				Double.parseDouble(listData.get(8).getContent3() == null ? "0" : listData.get(8).getContent3()));
		compare.setWidth(
				Double.parseDouble(listData.get(9).getContent3() == null ? "0" : listData.get(9).getContent3()));
		compare.setHeight(
				Double.parseDouble(listData.get(10).getContent3() == null ? "0" : listData.get(10).getContent3()));
		compare.setShape(listData.get(11).getContent3());
		compare.setPosition(listData.get(12).getContent3());
		compare.setTraffic(listData.get(13).getContent3());
		compare.setOther(listData.get(14).getContent3());
		compare.setCtxd(listData.get(15).getContent3());
		compare.setPriceSale(
				Double.parseDouble(listData.get(16).getContent3() == null ? "0" : listData.get(16).getContent3()));
		compare.setPriceDeal(
				Double.parseDouble(listData.get(17).getContent3() == null ? "0" : listData.get(17).getContent3()));
		compare.setPricePurpose(
				Double.parseDouble(listData.get(18).getContent3() == null ? "0" : listData.get(18).getContent3()));
		compare.setPriceBoundary(
				Double.parseDouble(listData.get(19).getContent3() == null ? "0" : listData.get(19).getContent3()));
		compare.setPriceLand(
				Double.parseDouble(listData.get(20).getContent3() == null ? "0" : listData.get(20).getContent3()));
		compare.setUnitPrice(
				Double.parseDouble(listData.get(21).getContent3() == null ? "0" : listData.get(21).getContent3()));
		compare.setAppraisal(app);
		
		comService.save(compare);
		
		Comparison compare1 = new Comparison();

		compare1.setAddress(listData.get(0).getContent4());
		compare1.setRefference(listData.get(1).getContent4());
		compare1.setCreateDate(listData.get(2).getContent4());
		compare1.setLegal(listData.get(3).getContent4());
		compare1.setType(listData.get(4).getContent4());
		compare1.setAcreage(
				Double.parseDouble(listData.get(5).getContent4() == null ? "0" : listData.get(5).getContent4()));
		compare1.setNtsacr(
				Double.parseDouble(listData.get(6).getContent4() == null ? "0" : listData.get(6).getContent4()));
		compare1.setClnacr(
				Double.parseDouble(listData.get(7).getContent4() == null ? "0" : listData.get(7).getContent4()));
		compare1.setVplgacr(
				Double.parseDouble(listData.get(8).getContent4() == null ? "0" : listData.get(8).getContent4()));
		compare1.setWidth(
				Double.parseDouble(listData.get(9).getContent4() == null ? "0" : listData.get(9).getContent4()));
		compare1.setHeight(
				Double.parseDouble(listData.get(10).getContent4() == null ? "0" : listData.get(10).getContent4()));
		compare1.setShape(listData.get(11).getContent4());
		compare1.setPosition(listData.get(12).getContent4());
		compare1.setTraffic(listData.get(13).getContent4());
		compare1.setOther(listData.get(14).getContent4());
		compare1.setCtxd(listData.get(15).getContent4());
		compare1.setPriceSale(
				Double.parseDouble(listData.get(16).getContent4() == null ? "0" : listData.get(16).getContent4()));
		compare1.setPriceDeal(
				Double.parseDouble(listData.get(17).getContent4() == null ? "0" : listData.get(17).getContent4()));
		compare1.setPricePurpose(
				Double.parseDouble(listData.get(18).getContent4() == null ? "0" : listData.get(18).getContent4()));
		compare1.setPriceBoundary(
				Double.parseDouble(listData.get(19).getContent4() == null ? "0" : listData.get(19).getContent4()));
		compare1.setPriceLand(
				Double.parseDouble(listData.get(20).getContent4() == null ? "0" : listData.get(20).getContent4()));
		compare1.setUnitPrice(
				Double.parseDouble(listData.get(21).getContent4() == null ? "0" : listData.get(21).getContent4()));
		compare1.setAppraisal(app);
		
		comService.save(compare1);
		
		Comparison compare2 = new Comparison();

		compare2.setAddress(listData.get(0).getContent5());
		compare2.setRefference(listData.get(1).getContent5());
		compare2.setCreateDate(listData.get(2).getContent5());
		compare2.setLegal(listData.get(3).getContent5());
		compare2.setType(listData.get(4).getContent5());
		compare2.setAcreage(
				Double.parseDouble(listData.get(5).getContent5() == null ? "0" : listData.get(5).getContent5()));
		compare2.setNtsacr(
				Double.parseDouble(listData.get(6).getContent5() == null ? "0" : listData.get(6).getContent5()));
		compare2.setClnacr(
				Double.parseDouble(listData.get(7).getContent5() == null ? "0" : listData.get(7).getContent5()));
		compare2.setVplgacr(
				Double.parseDouble(listData.get(8).getContent5() == null ? "0" : listData.get(8).getContent5()));
		compare2.setWidth(
				Double.parseDouble(listData.get(9).getContent5() == null ? "0" : listData.get(9).getContent5()));
		compare2.setHeight(
				Double.parseDouble(listData.get(10).getContent5() == null ? "0" : listData.get(10).getContent5()));
		compare2.setShape(listData.get(11).getContent5());
		compare2.setPosition(listData.get(12).getContent5());
		compare2.setTraffic(listData.get(13).getContent5());
		compare2.setOther(listData.get(14).getContent5());
		compare2.setCtxd(listData.get(15).getContent5());
		compare2.setPriceSale(
				Double.parseDouble(listData.get(16).getContent5() == null ? "0" : listData.get(16).getContent5()));
		compare2.setPriceDeal(
				Double.parseDouble(listData.get(17).getContent5() == null ? "0" : listData.get(17).getContent5()));
		compare2.setPricePurpose(
				Double.parseDouble(listData.get(18).getContent5() == null ? "0" : listData.get(18).getContent5()));
		compare2.setPriceBoundary(
				Double.parseDouble(listData.get(19).getContent5() == null ? "0" : listData.get(19).getContent5()));
		compare2.setPriceLand(
				Double.parseDouble(listData.get(20).getContent5() == null ? "0" : listData.get(20).getContent5()));
		compare.setUnitPrice(
				Double.parseDouble(listData.get(21).getContent5() == null ? "0" : listData.get(21).getContent5()));
		compare2.setAppraisal(app);
		
		comService.save(compare2);

		return ResponseEntity.ok().body(compare);
	}
	
	@GetMapping("/appraisal/q={keyword}")
	public ResponseEntity<List<Appraisal>> findByKeyword(@PathVariable("keyword") String keyword) {
		return ResponseEntity.ok().body(appService.findByKeyword("%" + keyword + "%"));
	}
	
	@GetMapping("/appraisal/getAll")
	public ResponseEntity<List<Appraisal>> getAllAppraisal() {
		return ResponseEntity.ok().body(appService.getAllAppraisal());
	}
	
	@GetMapping("/appraisal/appid={id}")
	public ResponseEntity<Appraisal> getByAppraisalId(@PathVariable("id") long id) {
		Appraisal app = appService.getById(id);
		if (app == null) {
			return ResponseEntity.notFound().build();
		}
		
		List<Comparison> listComparison = comService.findByAppraisalId(app.getId());
		for (Comparison item : listComparison) {
			System.out.println(item);
		}
		return ResponseEntity.ok().body(app);
	}
	
	@GetMapping("/appraisal/comparison={id}")
	public ResponseEntity<List<Comparison>> getComparisonByAppraisalId(@PathVariable("id") long id) {
		Appraisal app = appService.getById(id);
		if (app == null) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok().body(comService.findByAppraisalId(app.getId()));
	}

	@GetMapping("/getAllData/users")
	public ResponseEntity<List<User>> getUsers() {
		return ResponseEntity.ok().body(userService.getUsers());
	}

	@GetMapping("/user/{username}")
	public ResponseEntity<UserDTO> getUserInfo(@PathVariable("username") String username) {
		UserDTO userDTO = new UserDTO();
		User user = userService.getUser(username);
		userDTO.setUser(user);
		CashWallet cw = cwService.findByUsername(username);
		CommissionWallet cmw = cmwService.findByUsername(username);

		userDTO.setCashbalance(cw.getBalance());
		userDTO.setCommissionbalance(cmw.getBalance());

		if (user.getLeftref().equals("")) {
			userDTO.setLeftrefsale(0);
		} else {
			userDTO.setLeftrefsale(userService.getUser(user.getLeftref()).getTeamsales());
		}
		if (user.getRightref().equals("")) {
			userDTO.setRightrefsale(0);
		} else {
			userDTO.setRightrefsale(userService.getUser(user.getLeftref()).getTeamsales());
		}

		return ResponseEntity.ok().body(userDTO);
	}

	@PostMapping("/user/validation")
	public ResponseEntity<String> getUserIsActivated(@RequestParam("username") String username,
			@RequestParam("password") String password, @RequestParam("authen") String authen) {
		User user = userService.getUser(username);
		try {
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

			if (user.isActived() == false) {
				if (encoder.matches(password, user.getPassword())) {
					return ResponseEntity.ok().body("Not Actived");
				} else {
					return ResponseEntity.ok().body("Password is not correct");
				}
			} else {
				if (encoder.matches(password, user.getPassword())) {
					if (user.isMfaEnabled()) {
						TimeProvider timeProvider = new SystemTimeProvider();
						CodeGenerator codeGenerator = new DefaultCodeGenerator();
						DefaultCodeVerifier verify = new DefaultCodeVerifier(codeGenerator, timeProvider);
						verify.setAllowedTimePeriodDiscrepancy(0);
						if (verify.isValidCode(user.getSecret(), authen)) {
							return ResponseEntity.ok().body("success");
						} else {
							return ResponseEntity.ok().body("Wrong 2FA");
						}
					} else {
						return ResponseEntity.ok().body("success");
					}

				} else {
					return ResponseEntity.ok().body("Password is not correct");
				}
			}
		} catch (Exception e) {
			return ResponseEntity.ok().body("Username is not exist");
		}
	}

	@PostMapping("/affiliate/generate")
	public ResponseEntity<Affiliate> addAffiliate(@RequestParam("root") String root,
			@RequestParam("placement") String placement, @RequestParam("side") String side) {
		return ResponseEntity.ok().body(affService.addRegisURL(root, placement, side));
	}

	@GetMapping("/packages")
	public ResponseEntity<List<Pack>> getAllPackages() {
		return ResponseEntity.ok().body(packService.getAllPackges());
	}

	@GetMapping("/investment/withdrawCapital/{investmentcode}")
	public ResponseEntity<Investment> withdrawCapital(@PathVariable("investmentcode") String investmentcode) {
		Investment invest = investService.findInvestmentByCode(investmentcode);
		User user = userService.getUser(invest.getUsername());
		double newSale = user.getSales() - invest.getClaimable();
		userService.updateSaleFromWithdraw(user.getUsername(), (long) newSale);

		List<User> listUser = userService.getTreeUpToRoot(user.getUsername());

		for (User item : listUser) {
			if (item.getRank() != 0 || item.getUsername().equalsIgnoreCase(user.getUsername())) {
				long newTeamSale = (long) (invest.getClaimable());
				userService.updateteamSaleWithdraw(item.getUsername(), newTeamSale);
			} else {
				continue;
			}
		}
		userService.calRank();

		return ResponseEntity.ok().body(investService.withdrawCapital(investmentcode));
	}

	@GetMapping("/cashWallet/balance/{username}")
	public ResponseEntity<CashWallet> getCashWalletBalance(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(cwService.findByUsername(username));
	}

	@GetMapping("/commissionWallet/balance/{username}")
	public ResponseEntity<CommissionWallet> getCommissionWalletBalance(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(cmwService.findByUsername(username));
	}

	@GetMapping("/history/commission/{username}")
	public ResponseEntity<List<HistoryWallet>> getAllCommissionHistories(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(hwService.findCommissionHistoryByUsername(username));
	}

	@GetMapping("/history/swap/{username}")
	public ResponseEntity<List<HistoryWallet>> getAllSwapHistories(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(hwService.findSwapHistoryByUsername(username));
	}

	@GetMapping("/history/withdraw/{username}")
	public ResponseEntity<List<HistoryWallet>> getAllWithdrawHistories(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(hwService.findWithdrawHistoryByUsername(username));
	}

	@GetMapping("/history/deposit/{username}")
	public ResponseEntity<List<HistoryWallet>> getAllDepositHistories(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(hwService.findDepositHistoryByUsername(username));
	}

	@GetMapping("/history/transfer/{username}")
	public ResponseEntity<List<HistoryWallet>> getAllTransferHistories(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(hwService.findTransferHistoryByUsername(username));
	}

	@GetMapping("/history/runningInvestment/{username}")
	public ResponseEntity<List<Investment>> getAllInvestmentRunningHistories(
			@PathVariable("username") String username) {
		return ResponseEntity.ok().body(investService.getAllActiveByUsername(username));
	}

	@GetMapping("/history/investment/{username}")
	public ResponseEntity<List<Investment>> getAllInvestmentHistories(@PathVariable("username") String username) {
		return ResponseEntity.ok().body(investService.getAllByUsername(username));
	}

	@PostMapping("/wallet/swap")
	public ResponseEntity<String> swapCommission(@RequestParam("username") String username,
			@RequestParam("amount") double amount) {
		User user = userService.getUser(username);
		if (user.isLocked()) {
			return ResponseEntity.ok().body("Your account is locked trade method, please contact to customer service");
		}
		CommissionWallet cmw = cmwService.findByUsername(username);
		CashWallet cw = cwService.findByUsername(username);
		if (cmw.getBalance() < amount) {
			return ResponseEntity.ok().body("Amount is greater than commisison balance");
		}
		if (user.getMaxoutleft() < amount) {
			return ResponseEntity.ok().body("Amount is greater than Max out");
		}
		cmw.setBalance(cmw.getBalance() - amount);
		cmwService.updateBalance(cmw);

		cw.setBalance(cw.getBalance() + amount);
		cwService.updateBalance(cw);

		userService.updateMaxOut(user, amount, "swap");

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy");
		LocalDateTime dateTime = LocalDateTime.now();
		String formattedDateTime = dateTime.format(formatter);
		String uuid = UUID.randomUUID().toString();

		HistoryWallet hw = new HistoryWallet();
		hw.setAmount(amount);
		hw.setTime(formattedDateTime);
		hw.setType("Swap commission");
		hw.setCode(uuid);
		hw.setHash("");
		hw.setStatus("success");
		hw.setFrominvestment("");
		hw.setUsername(username);
		hwService.update(hw);

		return ResponseEntity.ok().body("success");
	}

	@PostMapping("/wallet/deposit")
	public ResponseEntity<String> deposit(@RequestParam("username") String username,
			@RequestParam("amount") double amount) {
		System.out.println(username);
		System.out.println(amount);
		return ResponseEntity.ok().body("OK");
	}

	@PostMapping("/wallet/transfer")
	public ResponseEntity<String> transfer(@RequestParam("username") String username,
			@RequestParam("receiver") String receiver, @RequestParam("amount") double amount) {
		User user = userService.getUser(username);
		if (user.isLocked()) {
			return ResponseEntity.ok().body("Your account is locked trade method, please contact to customer service");
		}

		CommissionWallet cw = cmwService.findByUsername(username);

		User receiverUser = userService.getUser(receiver);
		CommissionWallet receiverCW = cmwService.findByUsername(receiver);

		if (cw.getBalance() < amount) {
			return ResponseEntity.ok().body("Amount is greater than your balance");
		}
		if (user.getMaxoutleft() < amount) {
			return ResponseEntity.ok().body("Amount is greater than your Max out");
		}

		cw.setBalance(cw.getBalance() - amount);
		cmwService.updateBalance(cw);

		receiverCW.setBalance(receiverCW.getBalance() + amount);
		cmwService.updateBalance(receiverCW);

		userService.updateMaxOut(user, amount, "transfer");
		userService.updateMaxOut(receiverUser, amount, "receive");

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy");
		LocalDateTime dateTime = LocalDateTime.now();
		String formattedDateTime = dateTime.format(formatter);
		String uuid = UUID.randomUUID().toString();

		HistoryWallet hw = new HistoryWallet();
		hw.setAmount(amount);
		hw.setTime(formattedDateTime);
		hw.setType("Transfer");
		hw.setCode(uuid);
		hw.setHash("");
		hw.setStatus("success");
		hw.setCashfrom(username);
		hw.setCashto(receiver);
		hw.setFrominvestment("");
		hw.setUsername(username);
		hwService.update(hw);

		return ResponseEntity.ok().body("success");
	}

	@PostMapping("/wallet/withdraw")
	public ResponseEntity<String> withdraw(@RequestParam("walletaddress") String walletaddress,
			@RequestParam("amount") double amount) {
		User user = new User();
		if (user.isLocked()) {
			return ResponseEntity.ok().body("Your account is locked trade method, please contact to customer service");
		}
		System.out.println(walletaddress);
		System.out.println(amount);
		return ResponseEntity.ok().body("OK");
	}

	@PostMapping("/package/buy")
	public ResponseEntity<String> buyPackage(@RequestParam("packid") int packid,
			@RequestParam("username") String username) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy");
		LocalDateTime dateTime = LocalDateTime.now();
		String formattedDateTime = dateTime.format(formatter);
		String randomString = UUID.randomUUID().toString();
		String uuid = randomString.substring(24, randomString.length());
		String forDirect = UUID.randomUUID().toString();
		String forSelf = UUID.randomUUID().toString();
		Pack pack = packService.findById(packid);
		User user = userService.getUser(username);
		CashWallet cw = cwService.findByUsername(username);
		HistoryWallet hw = new HistoryWallet();
		Investment invest = new Investment();
		invest.setPackageId(packid);
		invest.setUsername(username);
		invest.setTime(formattedDateTime);
		invest.setCapital(pack.getPrice());
		invest.setCode(uuid);
		invest.setCapital(pack.getPrice());
		invest.setCount(0);
		invest.setClaimable(0);
		invest.setRemain(pack.getPrice());
		boolean check = false;
		if (pack.getPrice() <= cw.getBalance()) {
			check = true;
		}

		if (check) {
			investService.save(invest);
			userService.updateSale(user.getUsername(), pack.getPrice());
			userService.updateMaxOut(user, pack.getPrice(), "buy");

			User sponsor = userService.getUser(user.getRootUsername());
			CommissionWallet cmwSponsor = cmwService.findByUsername(sponsor.getUsername());
			HistoryWallet hwSponsor = new HistoryWallet();

			double commissionrate = 0;
			int rank = sponsor.getRank();

			switch (rank) {
			case 1:
				commissionrate = 5;
				break;
			case 2:
				commissionrate = 5.5;
				break;
			case 3:
				commissionrate = 6;
				break;
			case 4:
				commissionrate = 7;
				break;
			case 5:
				commissionrate = 8;
				break;
			case 6:
				commissionrate = 9;
				break;
			case 7:
				commissionrate = 10;
				break;
			case 8:
				commissionrate = 12;
				break;
			case 9:
				commissionrate = 15;
				break;
			}

			if (sponsor.getRank() > 0) {
				double directCommission = cmwSponsor.getBalance() + (pack.getPrice() * commissionrate / 100);

				cmwSponsor.setBalance(directCommission);

				hwSponsor.setAmount(pack.getPrice() * commissionrate / 100);
				hwSponsor.setCashfrom(user.getUsername());
				hwSponsor.setCashto(sponsor.getUsername());
				hwSponsor.setFrominvestment(uuid);
				hwSponsor.setTime(formattedDateTime);
				hwSponsor.setType("Direct Commission");
				hwSponsor.setCode(forDirect);
				hwSponsor.setHash("");
				hwSponsor.setStatus("success");
				hwSponsor.setUsername(cmwSponsor.getUsername());
				hwService.update(hwSponsor);
				cmwService.updateBalance(cmwSponsor);

			}

			cw.setBalance(cw.getBalance() - pack.getPrice());
			hw.setAmount(pack.getPrice());
			hw.setTime(formattedDateTime);
			hw.setCode(forSelf);
			hw.setHash("");
			hw.setStatus("success");
			hw.setType("Buy Package");
			hw.setUsername(cw.getUsername());
			hwService.update(hw);
			cwService.updateBalance(cw);

			List<User> listUser = userService.getTreeUpToRoot(username);

			for (User item : listUser) {
				if (item.getRank() != 0 || item.getUsername().equalsIgnoreCase(user.getUsername())) {
					userService.updateteamSale(item.getUsername(), pack.getPrice());
				} else {
					continue;
				}
			}

			userService.calRank();
			return ResponseEntity.ok().body("OK");
		} else {
			return ResponseEntity.ok().body("Failed, balance is not enough to buy this package");
		}
	}

	@GetMapping("/affiliate/getByRoot/investment")
	public ResponseEntity<List<Investment>> getAll() {
		return ResponseEntity.ok().body(investService.getAllInvestment());
	}

	// L·∫•y reflink t·ª´ {username}
	@GetMapping("/affiliate/getByRoot/{root}")
	public ResponseEntity<List<Affiliate>> getAffiliateByRoot(@PathVariable("root") String root) {
		return ResponseEntity.ok().body(affService.getByRoot(root));
	}

	// L·∫•y reflink t·ª´ {username}
	@GetMapping("/affiliate/getByPlacement/{placement}")
	public ResponseEntity<List<Affiliate>> getAffiliateByPlacement(@PathVariable("placement") String placement) {
		return ResponseEntity.ok().body(affService.getByPlacement(placement));
	}

	// L·∫•y reflink b√™n tr√°i/ph·∫£i
	@GetMapping("/affiliate/getByPlacement/{placement}/{side}")
	public ResponseEntity<Affiliate> getAffiliateByPlacementAndSide(@PathVariable("placement") String placement,
			@PathVariable("side") String side) {
		return ResponseEntity.ok().body(affService.getByPlacementAndSide(placement, side));
	}

	// L·∫•y th√¥ng tin ref ƒëƒÉng k√Ω
	@GetMapping("/affiliate/{uuid}")
	public ResponseEntity<Affiliate> getAffiliate(@PathVariable String uuid) {
		return ResponseEntity.ok().body(affService.getByUUID(uuid));
	}

	// l·∫•y 15 t·∫ßng ph√≠a tr√™n
	@GetMapping("/userTreeUp/{username}")
	public ResponseEntity<List<User>> getUserUp(@PathVariable String username) {
		return ResponseEntity.ok().body(userService.getTreeUp(username));
	}

	// l·∫•y l√™n ƒë·∫øn root
	@GetMapping("/userTreeUpToRoot/{username}")
	public ResponseEntity<List<User>> getUserUpToRoot(@PathVariable String username) {
		return ResponseEntity.ok().body(userService.getTreeUpToRoot(username));
	}

	// l·∫•y 15 t·∫ßng xu·ªëng
	@GetMapping("/userMapDown/{username}")
	public ResponseEntity<HashMap<String, List<User>>> getMapDown(@PathVariable String username) {
		return ResponseEntity.ok().body(userService.getMapDown(username));
	}

	// l·∫•y 5 t·∫ßng xu·ªëng
	@GetMapping("/userMapDown5Level/{username}")
	public ResponseEntity<HashMap<String, List<User>>> getMapDown5Level(@PathVariable String username) {
		return ResponseEntity.ok().body(userService.getMapDown5Level(username));
	}

	@PutMapping("/affiliate/{uuid}")
	public ResponseEntity<String> updateAffiliate(@PathVariable String uuid) {
		affService.updateRegistered(uuid);
		return ResponseEntity.ok().body("OK");
	}

	@PostMapping("/user/forgotpassword")
	public ResponseEntity<String> forgotPassword(@RequestParam("email") String email) {
		User user = userService.findByEmail(email);
		String uuid = UUID.randomUUID().toString();
		if (user != null) {
			Recovery recoverPassword = new Recovery();
			recoverPassword.setUsername(user.getUsername());
			recoverPassword.setUuid(uuid);
			recoService.saveRecovery(recoverPassword);

			Thread thread = new Thread() {
				public void run() {
					sendMail(email, "Link: https://jasontr.online/reset-password/" + uuid);
				}
			};
			thread.start();
			return ResponseEntity.ok().body("OK");
		} else {
			return ResponseEntity.ok().body("Email is not existed");
		}

	}

	@PostMapping("/user/resetPassword")
	public ResponseEntity<String> resetPassword(@RequestParam("uuid") String uuid,
			@RequestParam("newPassword") String newPassword) {
		Recovery recover = recoService.findByUUID(uuid);
		if (recover != null) {
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			User user = userService.getUser(recover.getUsername());
			user.setPassword(encoder.encode(newPassword));
			userService.changePassword(user);
			recoService.remove(uuid);

			return ResponseEntity.ok().body("Reset password successfull");
		} else {
			return ResponseEntity.ok().body("Reset password link is invalid");
		}
	}

	@PostMapping("/user/getPoint")
	public ResponseEntity<String> getPoint(@RequestParam("username") String username,
			@RequestParam("amount") double amount) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy");
		LocalDateTime dateTime = LocalDateTime.now();
		String formattedDateTime = dateTime.format(formatter);
		String uuid = UUID.randomUUID().toString();

		CashWallet cw = cwService.findByUsername(username);
		cw.setBalance(cw.getBalance() + amount);
		cwService.updateBalance(cw);

		HistoryWallet history = new HistoryWallet();
		history.setAmount(amount);
		history.setCashfrom("System");
		history.setCashto(username);
		history.setFrominvestment("");
		history.setTime(formattedDateTime);
		history.setType("Transfer");
		history.setCode(uuid);
		history.setHash("");
		history.setStatus("success");
		history.setUsername(username);
		hwService.update(history);

		return ResponseEntity.ok().body("success");
	}

	@PostMapping("/user/regis")
	public ResponseEntity<User> saveUser(@RequestBody User user) {
		URI uri = URI
				.create(ServletUriComponentsBuilder.fromCurrentContextPath().path("/api/user/regis").toUriString());

		int checkPinNumber = (int) Math.floor(((Math.random() * 899999) + 100000));
		String uuid = UUID.randomUUID().toString();
		Activation acti = new Activation();
		acti.setUuid(uuid);
		acti.setUsername(user.getUsername());
		acti.setActivation(checkPinNumber);
		actiService.save(acti);

		Thread thread = new Thread() {
			public void run() {
				sendMail(user.getEmail(), "Link: https://jasontr.online/active-account/" + acti.getUuid() + "\n"
						+ "Active code: " + checkPinNumber);
			}
		};
		thread.start();

		CommissionWallet cmw = new CommissionWallet();
		cmw.setBalance(0);
		cmw.setUsername(user.getUsername());
		cmwService.createCommissionWallet(cmw);

		CashWallet cw = new CashWallet();
		cw.setBalance(0);
		cw.setUsername(user.getUsername());
		cwService.createCashWallet(cw);

		String secret = secretGenerator.generate();

		user.setSecret(secret);

		return ResponseEntity.created(uri).body(userService.regis(user));
	}

	@PostMapping("/user/active/{uuid}")
	public ResponseEntity<String> active(@PathVariable("uuid") String uuid,
			@RequestParam("activecode") String activecode) {
		Activation acti = actiService.getActivation(uuid);
		if (acti.getActivation() == Integer.parseInt(activecode)) {
			User user = userService.getUser(acti.getUsername());
			userService.activated(user);

			actiService.activated(acti);
			return ResponseEntity.ok().body("Activation success");
		} else {
			return ResponseEntity.ok().body("Wrong activation code");
		}
	}

	@PostMapping("/user/active/resend")
	public ResponseEntity<String> resendactive(@RequestParam("username") String username) {
		Activation acti = actiService.getActivationByUsername(username);
		User user = userService.getUser(username);

		if (acti == null) {
			return ResponseEntity.ok().body("Cannot find your usename, please try again");
		} else {
			int checkPinNumber = (int) Math.floor(((Math.random() * 899999) + 100000));

			Thread thread = new Thread() {
				public void run() {
					sendMail(user.getEmail(), "Link: https://jasontr.online/active-account/" + acti.getUuid() + "\n"
							+ "Active code: " + checkPinNumber);
				}
			};

			thread.start();

			actiService.reGenerateActi(acti, checkPinNumber);

			return ResponseEntity.ok().body(acti.getUuid());
		}
	}

	@PutMapping("/user/updateRef")
	public ResponseEntity<User> saveUser(@RequestParam String username, @RequestParam String usernameRef,
			@RequestParam String side) {
		URI uri = URI
				.create(ServletUriComponentsBuilder.fromCurrentContextPath().path("/api/user/updateRef").toUriString());
		return ResponseEntity.created(uri).body(userService.updateRef(username, usernameRef, side));
	}

	@PostMapping("/role/save")
	public ResponseEntity<Role> saveRole(@RequestBody Role role) {
		URI uri = URI.create(ServletUriComponentsBuilder.fromCurrentContextPath().path("/api/role/save").toUriString());
		return ResponseEntity.created(uri).body(userService.saveRole(role));
	}

	@GetMapping("/token/refresh")
	public void refreshToken(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String authorizationHeader = request.getHeader(AUTHORIZATION);
		if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
			try {
				String refresh_token = authorizationHeader.substring("Bearer ".length());
				Algorithm algorithm = Algorithm.HMAC256("secret".getBytes());
				JWTVerifier verifier = JWT.require(algorithm).build();
				DecodedJWT decodedJWT = verifier.verify(refresh_token);
				String username = decodedJWT.getSubject();
				User user = userService.getUser(username);
				String access_token = JWT.create().withSubject(user.getUsername())
						.withExpiresAt(new Date(System.currentTimeMillis() + 30 * 60 * 1000))
						.withIssuer(request.getRequestURL().toString())
						.withClaim("roles", user.getRoles().stream().map(Role::getName).collect(Collectors.toList()))
						.sign(algorithm);
				Map<String, String> tokens = new HashMap<>();
				tokens.put("access_token", access_token);
				tokens.put("refresh_token", refresh_token);
				response.setContentType(MediaType.APPLICATION_JSON_VALUE);
				new ObjectMapper().writeValue(response.getOutputStream(), tokens);
			} catch (Exception exception) {
				response.setHeader("error", exception.getMessage());
				response.setStatus(FORBIDDEN.value());
				Map<String, String> error = new HashMap<>();
				error.put("error_message", exception.getMessage());
				response.setContentType(MimeTypeUtils.APPLICATION_JSON_VALUE);
				new ObjectMapper().writeValue(response.getOutputStream(), error);
			}
		} else {
			throw new RuntimeException("Refresh token is missing");
		}
	}

	public void sendMail(String emailTo, String body) {
		Email m = new Email();
		m.setFrom("test@hotmail.com");
		m.setSubject("hehehe ");
		m.setTo(emailTo);
		m.setBody(body);
		try {
			mailerServie.send(m);
		} catch (Exception e) {
			System.out.println("Error : " + e.getMessage());
		}
	}
}
